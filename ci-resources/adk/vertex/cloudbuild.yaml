# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

steps:
- id: "adk-vertex: prepare tests"
  name: "gcr.io/cloud-builders/gcloud"
  entrypoint: "bash"
  args:
    - '-c'
    - |
      cp -r /workspace/ci-resources/adk/vertex/tests /workspace/adk/vertex/tests

- id: "adk-vertex: validate platform"
  name: "gcr.io/${PROJECT_ID}/terraform"
  dir: "/workspace/adk/vertex/terraform"
  script: |
    terraform init -no-color
    terraform validate -no-color
  waitFor: ["adk-vertex: prepare tests"]

- id: 'adk-vertex: create gke cluster'
  name: "gcr.io/${PROJECT_ID}/terraform"
  dir: "/workspace/adk/vertex/terraform"
  env:
  - "KUBE_LOAD_CONFIG_FILE=false"
  entrypoint: 'sh'
  args:
  - '-c'
  - |
    set -e

    echo "fail" > /workspace/adk_vertex_gke_cluster_result.txt
    terraform apply \
    -var-file=default_env.tfvars \
    -var=project_id=$PROJECT_ID \
    -var=default_resource_name=ml-adk-vertex-$SHORT_SHA-$_BUILD_ID-$_AUTOPILOT_CLUSTER \
    -var=cluster_name=ml-adk-vertex-$SHORT_SHA-$_BUILD_ID-cluster \
    -var=cluster_location=$_ADK_VERTEX_REGION \
    -var=autopilot_cluster=$_AUTOPILOT_CLUSTER \
    -var=network_name=ml-adk-vertex-$SHORT_SHA-$_BUILD_ID-$_AUTOPILOT_CLUSTER \
    -var=subnetwork_name=ml-adk-vertex-$SHORT_SHA-$_BUILD_ID-$_AUTOPILOT_CLUSTER \
    -var=subnetwork_region=$_ADK_VERTEX_REGION \
    -var=image_repository_name=ml-adk-vertex-$SHORT_SHA-$_BUILD_ID-$_AUTOPILOT_CLUSTER \
    -var=iam_service_account_name=ml-adk-vertex-$SHORT_SHA-$_BUILD_ID-$_AUTOPILOT_CLUSTER-sa \
    -var=k8s_service_account_name=ml-adk-vertex-$SHORT_SHA-$_BUILD_ID-$_AUTOPILOT_CLUSTER-sa \
    -var=vertexai_custom_role_role_id=tutorialVertexAICustomRole$SHORT_SHA$_BUILD_ID \
    -var=vertexai_custom_role_role_title="VertexAI Tutorial Custom Role $SHORT_SHA $_BUILD_ID" \
    -auto-approve -no-color
    echo "pass" > /workspace/adk_vertex_gke_cluster_result.txt
  allowFailure: true
  waitFor: ['adk-vertex: validate platform']

- id: "adk-vertex: build adk-agent"
  name: 'gcr.io/cloud-builders/gcloud'
  dir: "/workspace/adk/vertex/app"
  args:
  - builds
  - submit
  - --tag
  - us-docker.pkg.dev/${PROJECT_ID}/ml-adk-vertex-${SHORT_SHA}-${_BUILD_ID}-${_AUTOPILOT_CLUSTER}/adk-agent:latest
  - .
  allowFailure: true
  waitFor: ['adk-vertex: create gke cluster']

- id: 'adk-vertex: generate kubeconfig'
  name: 'gcr.io/cloud-builders/gcloud'
  args:
  - 'container'
  - 'clusters'
  - 'get-credentials'
  - 'ml-adk-vertex-${SHORT_SHA}-${_BUILD_ID}-cluster'
  - '--region=${_ADK_VERTEX_REGION}'
  - '--project=${PROJECT_ID}'
  allowFailure: true
  waitFor: ['adk-vertex: create gke cluster']

- id: "adk-vertex: test guide"
  name: "gcr.io/cloud-builders/kubectl"
  dir: "/workspace/adk/vertex/terraform"
  env:
    - "CLOUDSDK_COMPUTE_ZONE=${_REGION}"
    - "CLOUDSDK_CONTAINER_CLUSTER=ml-${SHORT_SHA}-${_BUILD_ID}-cluster"
  entrypoint: 'sh'
  args:
  - '-c'
  - |
    set -e
    echo "fail" > /workspace/adk_vertex_test_guide.txt

    cat <<  EOF > ../app/deployment.yaml
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: adk-agent
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: adk-agent
      template:
        metadata:
          labels:
            app: adk-agent
        spec:
          serviceAccount: ml-adk-vertex-${SHORT_SHA}-${_BUILD_ID}-${_AUTOPILOT_CLUSTER}-sa
          containers:
          - name: adk-agent
            imagePullPolicy: Always
            image: us-docker.pkg.dev/${PROJECT_ID}/ml-adk-vertex-${SHORT_SHA}-${_BUILD_ID}-${_AUTOPILOT_CLUSTER}/adk-agent:latest
            resources:
              limits:
                memory: "256Mi"
                cpu: "500m"
                ephemeral-storage: "128Mi"
              requests:
                memory: "256Mi"
                cpu: "500m"
                ephemeral-storage: "128Mi"
            ports:
            - containerPort: 8080
            env:
              - name: PORT
                value: "8080"
              - name: GOOGLE_CLOUD_PROJECT
                value: ${PROJECT_ID}
              - name: GOOGLE_CLOUD_LOCATION
                value: ${_ADK_VERTEX_REGION}
              - name: GOOGLE_GENAI_USE_VERTEXAI
                value: "true"
            readinessProbe:
              httpGet:
                path: /
                port: 8080
              initialDelaySeconds: 10
              periodSeconds: 10
              timeoutSeconds: 5
              failureThreshold: 5
              successThreshold: 1
    ---
    apiVersion: v1
    kind: Service
    metadata:
      name: adk-agent
    spec:
      type: NodePort
      ports:
        - port: 80
          targetPort: 8080
      selector:
        app: adk-agent
    EOF


    kubectl apply -f ../app/deployment.yaml
    kubectl rollout status deployment/adk-agent
    kubectl port-forward svc/adk-agent 8080:80 &
    sleep 5s

    apt update
    apt install python3-venv --assume-yes
    apt install python3-pip --assume-yes
    pip install requests
    python3 /workspace/adk/vertex/tests/test.py http://127.0.0.1:8080

    echo "pass" > /workspace/adk_vertex_test_guide.txt
  allowFailure: true
  waitFor: ['adk-vertex: generate kubeconfig', 'adk-vertex: build adk-agent']

- id: 'adk-vertex: cleanup gke cluster'
  name: "gcr.io/${PROJECT_ID}/terraform"
  dir: "/workspace/adk/vertex/terraform"
  entrypoint: 'sh'
  args:
  - '-c'
  - |
    set -e

    echo "fail" > /workspace/adk_vertex_cleanup_gke_cluster.txt
    terraform destroy \
    -var-file=default_env.tfvars \
    -var=project_id=$PROJECT_ID \
    -var=default_resource_name=ml-adk-vertex-$SHORT_SHA-$_BUILD_ID-$_AUTOPILOT_CLUSTER \
    -var=cluster_name=ml-adk-vertex-$SHORT_SHA-$_BUILD_ID-cluster \
    -var=cluster_location=$_ADK_VERTEX_REGION \
    -var=network_name=ml-adk-vertex-$SHORT_SHA-$_BUILD_ID-$_AUTOPILOT_CLUSTER \
    -var=subnetwork_name=ml-adk-vertex-$SHORT_SHA-$_BUILD_ID-$_AUTOPILOT_CLUSTER \
    -var=subnetwork_region=$_ADK_VERTEX_REGION \
    -var=autopilot_cluster=$_AUTOPILOT_CLUSTER \
    -var=image_repository_name=ml-adk-vertex-$SHORT_SHA-$_BUILD_ID-$_AUTOPILOT_CLUSTER \
    -var=iam_service_account_name=ml-adk-vertex-$SHORT_SHA-$_BUILD_ID-$_AUTOPILOT_CLUSTER-sa \
    -var=k8s_service_account_name=ml-adk-vertex-$SHORT_SHA-$_BUILD_ID-$_AUTOPILOT_CLUSTER-sa \
    -var=vertexai_custom_role_role_id=tutorialVertexAICustomRole$SHORT_SHA$_BUILD_ID \
    -var=vertexai_custom_role_role_title="VertexAI Tutorial Custom Role $SHORT_SHA $_BUILD_ID" \
    -auto-approve -no-color
    echo "pass" > /workspace/adk_vertex_cleanup_gke_cluster.txt
  allowFailure: true
  waitFor: ['adk-vertex: test guide']

- id: 'adk-vertex: create github issue'
  name: 'gcr.io/cloud-builders/curl'
  secretEnv: ["GH_CLIENT_ID", "GH_PEM"]
  entrypoint: '/bin/bash'
  args:
  - -c
  - |
    apt update
    apt install jq curl python3-venv python3-pip --assume-yes
    pip install PyJWT cryptography

    echo $_GITHUB_ISSUE
    if [[ $_GITHUB_ISSUE != "true" ]]; then
      exit 0
    fi

    if curl -L \
      -H "Accept: application/vnd.github+json" \
      -H "Authorization: Bearer $$GITHUB_TOKEN" \
      -H "X-GitHub-Api-Version: 2022-11-28" \
      https://api.github.com/repos/dmitriy-drogovoz-us/tutorials-and-examples/issues | jq -e '.[] | select(.labels[] | .name == "adk-vertex") | select(.labels[] | .name == "ci/automated-issue")' > /dev/null
    then
      exit 0
    fi

    failed_steps=""

    # Read the results from each step's log file
    if [[ $(cat /workspace/adk_vertex_gke_cluster_result.txt) != "pass" ]]; then
      failed_steps+="* adk vertex gke cluster creation failed\n"
    fi

    if [[ $(cat /workspace/adk_vertex_test_guide.txt) != "pass" ]]; then
      failed_steps+="* adk vertex test guide failed\n"
    fi

    if [[ $(cat /workspace/adk_vertex_cleanup_gke_cluster.txt) != "pass" ]]; then
      failed_steps+="* adk vertex gke cluster cleanup failed\n"
    fi

    # If there are any failed steps, create a GitHub Issue
    if [[ -n "$failed_steps" ]]; then
      issue_title="ADK Vertex CI/CD Failure: Some steps have failed"
      issue_body="The following steps failed in the Cloud Build pipeline:\n\n$failed_steps"

      payload=$(printf '{"title":"%s","body":"%s","labels":["bug", "adk-vertex", "ci/automated-issue"]}' "$issue_title" "$issue_body")

      jwt=$(python3 generate_jwt.py)
      gh_token=$(curl --request POST \
      --url "https://api.github.com/app/installations/90973651/access_tokens" \
      --header "Accept: application/vnd.github+json" \
      --header "Authorization: Bearer $jwt" \
      --header "X-GitHub-Api-Version: 2022-11-28" | jq -r .token)

      curl -L \
        -X POST \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer $gh_token" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        https://api.github.com/repos/dmitriy-drogovoz-us/tutorials-and-examples/issues \
        -d "$payload"
    fi
  allowFailure: true
  waitFor: ['adk-vertex: cleanup gke cluster']

- id: 'adk-vertex: check result'
  name: "ubuntu"
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    set -e

    echo "pass" > /workspace/check_result.txt

    if [[ $(cat /workspace/adk_vertex_gke_cluster_result.txt) != "pass" ]]; then
      echo "adk vertex gke cluster creation failed"
      echo "error" > /workspace/check_result.txt
    fi

    if [[ $(cat /workspace/adk_vertex_test_guide.txt) != "pass" ]]; then
      echo "adk vertex test guide failed"
      echo "error" > /workspace/check_result.txt
    fi

    if [[ $(cat /workspace/adk_vertex_cleanup_gke_cluster.txt) != "pass" ]]; then
      echo "adk vertex gke cluster cleanup failed"
      echo "error" > /workspace/check_result.txt
    fi

    if [[ $(cat /workspace/check_result.txt) != "pass" ]]; then
      cat /workspace/check_result.txt
      exit 1
    fi
  waitFor: ['adk-vertex: create github issue']

substitutions:
  _ADK_VERTEX_REGION: us-central1
  _USER_NAME: github
  _AUTOPILOT_CLUSTER: "true"
  _BUILD_ID: ${BUILD_ID:0:8}
  _ITERATION: "0"
logsBucket: gs://ai-on-gke-qss-build-logs
options:
  substitutionOption: "ALLOW_LOOSE"
  machineType: "E2_HIGHCPU_8"
timeout: 5400s
availableSecrets:
  secretManager:
  - versionName: projects/ai-on-gke-qss/secrets/tutorials-and-examples-client-id/versions/latest
    env: "GH_CLIENT_ID"
  - versionName: projects/ai-on-gke-qss/secrets/tutorials-and-examples-pem/versions/latest
    env: "GH_PEM"
