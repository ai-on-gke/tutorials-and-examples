# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

steps:
- id: "flowise: validate platform"
  name: "gcr.io/${PROJECT_ID}/terraform"
  dir: "/workspace/flowise/terraform"
  script: |
    terraform init -no-color
    terraform validate -no-color
  waitFor: ["-"]

- id: 'flowise: create gke cluster'
  name: "gcr.io/${PROJECT_ID}/terraform"
  dir: "/workspace/flowise/terraform"
  env:
  - "KUBE_LOAD_CONFIG_FILE=false"
  entrypoint: 'sh'
  args:
  - '-c'
  - |
    set -e

    echo "fail" > /workspace/flowise_gke_cluster_result.txt
    terraform apply \
    -var-file=default_env.tfvars \
    -var=project_id=$PROJECT_ID \
    -var=default_resource_name=ml-flowise-$SHORT_SHA-$_BUILD_ID-$_AUTOPILOT_CLUSTER \
    -var=cluster_name=ml-flowise-$SHORT_SHA-$_BUILD_ID-cluster \
    -var=cluster_location=$_FLOWISE_REGION \
    -var=autopilot_cluster=$_AUTOPILOT_CLUSTER \
    -var=network_name=ml-flowise-$SHORT_SHA-$_BUILD_ID-$_AUTOPILOT_CLUSTER \
    -var=subnetwork_name=ml-flowise-$SHORT_SHA-$_BUILD_ID-$_AUTOPILOT_CLUSTER \
    -var=subnetwork_region=$_FLOWISE_REGION \
    -var=cloudsql_instance=pgvector-instance-$SHORT_SHA-$_BUILD_ID \
    -var=cloudsql_instance_region=$_FLOWISE_REGION \
    -var=iam_service_account_name=ml-flowise-$SHORT_SHA-$_BUILD_ID-$_AUTOPILOT_CLUSTER-sa \
    -var=k8s_service_account_name=ml-flowise-$SHORT_SHA-$_BUILD_ID-$_AUTOPILOT_CLUSTER-sa \
    -var=bucket_name=gke-aieco-flowise-$SHORT_SHA-$_BUILD_ID \
    -auto-approve -no-color
    echo "pass" > /workspace/flowise_gke_cluster_result.txt
  allowFailure: true
  waitFor: ['flowise: validate platform']

- id: 'flowise: generate kubeconfig'
  name: 'gcr.io/cloud-builders/gcloud'
  args:
  - 'container'
  - 'clusters'
  - 'get-credentials'
  - 'ml-flowise-${SHORT_SHA}-${_BUILD_ID}-cluster'
  - '--region=${_FLOWISE_REGION}'
  - '--project=${PROJECT_ID}'
  allowFailure: true
  waitFor: ['flowise: create gke cluster']

- id: 'flowise: allocate L4 GPU'
  name: "gcr.io/cloud-builders/kubectl"
  env:
  - "KUBE_LOAD_CONFIG_FILE=false"
  entrypoint: 'sh'
  args:
  - '-c'
  - |
    set -e

    echo "fail" > /workspace/flowise_allocate_l4_gpu_result.txt

    cat <<EOF > /workspace/gpu-l4-allocation.yaml
    apiVersion: v1
    kind: Pod
    metadata:
      name: my-gpu-pod
    spec:
      nodeSelector:
        cloud.google.com/gke-accelerator: "nvidia-l4"
      containers:
      - name: my-gpu-container
        image: nvidia/cuda:11.0.3-runtime-ubuntu20.04
        command: ["/bin/bash", "-c", "--"]
        args: ["while true; do sleep 600; done;"]
        resources:
          limits:
            cpu: 2
            memory: 4Gi
            nvidia.com/gpu: 1
    EOF
    cat /workspace/gpu-l4-allocation.yaml

    kubectl apply -f /workspace/gpu-l4-allocation.yaml
    kubectl wait --for=condition=Ready pod/my-gpu-pod --timeout=1200s
    echo "The GPU allocation is completed"

    echo "pass" > /workspace/flowise_allocate_l4_gpu_result.txt
  allowFailure: true
  waitFor: ['flowise: generate kubeconfig']

- id: "flowise: prepare ollama"
  name: "gcr.io/${PROJECT_ID}/terraform"
  dir: "/workspace/flowise/terraform"
  script: |
    cat <<EOF > ../ollama-deployment.yml
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: ollama
    spec:
      selector:
        matchLabels:
          app: ollama
      template:
        metadata:
          labels:
            app: ollama
          annotations:
            gke-gcsfuse/volumes: 'true'
        spec:
          serviceAccount: $(terraform output -raw k8s_service_account_name)
          nodeSelector:
            cloud.google.com/gke-accelerator: nvidia-l4
          containers:
            - name: ollama
              image: ollama/ollama:latest
              ports:
                - containerPort: 11434
              volumeMounts:
                - name: ollama-data
                  mountPath: /root/.ollama/
              resources:
                limits:
                  cpu: 2
                  memory: 4Gi
                  nvidia.com/gpu: 1
          volumes:
            - name: ollama-data
              csi:
                driver: gcsfuse.csi.storage.gke.io
                volumeAttributes:
                  bucketName: $(terraform output -raw bucket_name)
                  mountOptions: implicit-dirs,only-dir=ollama
    ---
    apiVersion: v1
    kind: Service
    metadata:
      name: ollama
    spec:
      selector:
        app: ollama
      ports:
        - protocol: TCP
          port: 11434
          targetPort: 11434
    EOF
    cat ../ollama-deployment.yml
  waitFor: ["flowise: create gke cluster"]

- id: 'flowise: deploy ollama'
  name: "gcr.io/cloud-builders/kubectl"
  dir: "/workspace/flowise/terraform"
  env:
  - "KUBE_LOAD_CONFIG_FILE=false"
  entrypoint: 'sh'
  args:
  - '-c'
  - |
    set -e

    echo "fail" > /workspace/flowise_deploy_ollama_result.txt

    echo ../ollama-deployment.yml
    kubectl delete -f /workspace/gpu-l4-allocation.yaml
    kubectl apply -f ../ollama-deployment.yml
    kubectl rollout status deployment/ollama
    sleep 60s
    kubectl exec $(kubectl get pod -l app=ollama -o name) -c ollama -- ollama pull llama3.2

    echo "pass" > /workspace/flowise_deploy_ollama_result.txt
  allowFailure: true
  waitFor: ['flowise: allocate L4 GPU', 'flowise: prepare ollama']

- id: "flowise: prepare flowise helm chart"
  name: "gcr.io/${PROJECT_ID}/terraform"
  dir: "/workspace/flowise/terraform"
  script: |
    cat <<EOF > ../values.yml
    externalPostgresql:
      enabled: true
      host: $(terraform output -raw cloudsql_instance_ip)
      port: 5432
      username: $(terraform output -raw cloudsql_database_user)
      existingSecret: $(terraform output -raw cloudsql_database_secret_name)
      existingSecretKeyPassword: password
      database: $(terraform output -raw cloudsql_database_name)
      readinessProbe:
        enabled: true
        initialDelaySeconds: 120
    serviceAccount:
      create: false
      name: $(terraform output -raw k8s_service_account_name)
    service:
      type: NodePort
      ports:
        http: 80
    EOF
  waitFor: ["flowise: deploy ollama"]

- id: 'flowise: deploy flowise'
  name: "gcr.io/${PROJECT_ID}/helm"
  dir: "/workspace/flowise/terraform"
  args:
  - 'install'
  - 'flowise'
  - 'cowboysysop/flowise'
  - '-f'
  - '../values.yml'
  env:
  - "CLOUDSDK_COMPUTE_ZONE=${_FLOWISE_REGION}"
  - "CLOUDSDK_CONTAINER_CLUSTER=ml-flowise-${SHORT_SHA}-${_BUILD_ID}-cluster"
  - "HELM_REPO_NAME=cowboysysop"
  - "HELM_REPO_URL=https://cowboysysop.github.io/charts/"
  allowFailure: true
  waitFor: ['flowise: prepare flowise helm chart']

- id: 'flowise: test guide'
  name: "gcr.io/cloud-builders/kubectl"
  dir: "/workspace/flowise/terraform"
  env:
  - "KUBE_LOAD_CONFIG_FILE=false"
  entrypoint: 'sh'
  args:
  - '-c'
  - |
    set -e

    echo "fail" > /workspace/flowise_test_guide_result.txt

    kubectl rollout status deployment/flowise
    sleep 30s
    kubectl get pods
    kubectl port-forward svc/ollama 3000:11434 &
    kubectl port-forward svc/flowise 3001:80 &
    sleep 5s

    echo "Check ollama"
    search_string="Ollama is running"
    if curl http://127.0.0.1:3000 | grep -q -m 1 "$search_string"; then
      echo "SUCCESS: String '$search_string' found in logs!"
    else
      echo "  String '$search_string' not found."
      exit 1
    fi

    echo "Check flowise"
    search_string=pong
    if curl http://127.0.0.1:3001/api/v1/ping | grep -q -m 1 "$search_string"; then
      echo "SUCCESS: String '$search_string' found in logs!"
    else
      echo "  String '$search_string' not found."
      exit 1
    fi

    echo "pass" > /workspace/flowise_test_guide_result.txt
  allowFailure: true
  waitFor: ['flowise: deploy ollama', 'flowise: deploy flowise']

- id: 'flowise: cleanup gke cluster'
  name: "gcr.io/${PROJECT_ID}/terraform"
  dir: "/workspace/flowise/terraform"
  env:
  - "KUBE_LOAD_CONFIG_FILE=false"
  entrypoint: 'sh'
  args:
  - '-c'
  - |
    set -e

    echo "fail" > /workspace/flowise_cleanup_gke_cluster.txt
    terraform destroy \
    -var-file=default_env.tfvars \
    -var=project_id=$PROJECT_ID \
    -var=default_resource_name=ml-flowise-$SHORT_SHA-$_BUILD_ID-$_AUTOPILOT_CLUSTER \
    -var=cluster_name=ml-flowise-$SHORT_SHA-$_BUILD_ID-cluster \
    -var=cluster_location=$_FLOWISE_REGION \
    -var=autopilot_cluster=$_AUTOPILOT_CLUSTER \
    -var=network_name=ml-flowise-$SHORT_SHA-$_BUILD_ID-$_AUTOPILOT_CLUSTER \
    -var=subnetwork_name=ml-flowise-$SHORT_SHA-$_BUILD_ID-$_AUTOPILOT_CLUSTER \
    -var=subnetwork_region=$_FLOWISE_REGION \
    -var=cloudsql_instance=pgvector-instance-$SHORT_SHA-$_BUILD_ID \
    -var=cloudsql_instance_region=$_FLOWISE_REGION \
    -var=iam_service_account_name=ml-flowise-$SHORT_SHA-$_BUILD_ID-$_AUTOPILOT_CLUSTER-sa \
    -var=k8s_service_account_name=ml-flowise-$SHORT_SHA-$_BUILD_ID-$_AUTOPILOT_CLUSTER-sa \
    -var=bucket_name=gke-aieco-flowise-$SHORT_SHA-$_BUILD_ID \
    -auto-approve -no-color
    echo "pass" > /workspace/flowise_cleanup_gke_cluster.txt
  allowFailure: true
  waitFor: ['flowise: test guide']

- id: 'flowise: create github issue'
  name: 'gcr.io/cloud-builders/gcloud'
  secretEnv: ["GH_CLIENT_ID", "GH_PEM"]
  entrypoint: 'bash'
  args:
  - -c
  - |
    apt update
    apt install jq curl python3-venv python3-pip --assume-yes
    pip install PyJWT cryptography

    echo $_GITHUB_ISSUE

    if [[ $_GITHUB_ISSUE != "true" ]]; then
      exit 0
    fi

    if [[ "$_GITHUB_ISSUE" == "true" && "$(cat /workspace/flowise_allocate_l4_gpu_result.txt)" != "pass" ]]; then
      gcloud pubsub topics publish ci-schedule \
        --message="{\"trigger_name\": \"flowise-scheduled\", \"iteration\": \"$_ITERATION\"}"
      exit 0
    fi

    if curl -L \
      -H "Accept: application/vnd.github+json" \
      -H "Authorization: Bearer $$GITHUB_TOKEN" \
      -H "X-GitHub-Api-Version: 2022-11-28" \
      https://api.github.com/repos/dmitriy-drogovoz-us/tutorials-and-examples/issues | jq -e '.[] | select(.labels[] | .name == "flowise") | select(.labels[] | .name == "ci/automated-issue")' > /dev/null
    then
      exit 0
    fi

    failed_steps=""

    # Read the results from each step's log file
    if [[ $(cat /workspace/flowise_gke_cluster_result.txt) != "pass" ]]; then
      failed_steps+="* flowise gke cluster creation failed\n"
    fi

    if [[ $(cat /workspace/flowise_deploy_ollama_result.txt) != "pass" ]]; then
      failed_steps+="* flowise deploy ollama failed\n"
    fi

    if [[ $(cat /workspace/flowise_test_guide_result.txt) != "pass" ]]; then
      failed_steps+="* flowise test guide failed\n"
    fi

    if [[ $(cat /workspace/flowise_cleanup_gke_cluster.txt) != "pass" ]]; then
      failed_steps+="* flowise gke cluster cleanup failed\n"
    fi

    # If there are any failed steps, create a GitHub Issue
    if [[ -n "$failed_steps" ]]; then
      issue_title="Flowise CI/CD Failure: Some steps have failed"
      issue_body="The following steps failed in the Cloud Build pipeline:\n\n$failed_steps"

      payload=$(printf '{"title":"%s","body":"%s","labels":["bug", "flowise", "ci/automated-issue"]}' "$issue_title" "$issue_body")

      jwt=$(python3 generate_jwt.py)
      gh_token=$(curl --request POST \
      --url "https://api.github.com/app/installations/90973651/access_tokens" \
      --header "Accept: application/vnd.github+json" \
      --header "Authorization: Bearer $jwt" \
      --header "X-GitHub-Api-Version: 2022-11-28" | jq -r .token)

      curl -L \
        -X POST \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer $gh_token" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        https://api.github.com/repos/dmitriy-drogovoz-us/tutorials-and-examples/issues \
        -d "$payload"
    fi
  allowFailure: true
  waitFor: ['flowise: cleanup gke cluster']

- id: 'flowise: check result'
  name: "ubuntu"
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    set -e

    echo "pass" > /workspace/check_result.txt

    if [[ $(cat /workspace/flowise_gke_cluster_result.txt) != "pass" ]]; then
      echo "flowise gke cluster creation failed"
      echo "error" > /workspace/check_result.txt
    fi

    if [[ $(cat /workspace/flowise_deploy_ollama_result.txt) != "pass" ]]; then
      echo "flowise deploy ollama failed"
      echo "error" > /workspace/check_result.txt
    fi

    if [[ $(cat /workspace/flowise_test_guide_result.txt) != "pass" ]]; then
      echo "flowise test guide failed"
      echo "error" > /workspace/check_result.txt
    fi

    if [[ $(cat /workspace/flowise_cleanup_gke_cluster.txt) != "pass" ]]; then
      echo "flowise gke cluster cleanup failed"
      echo "error" > /workspace/check_result.txt
    fi

    if [[ $(cat /workspace/check_result.txt) != "pass" ]]; then
      cat /workspace/check_result.txt
      exit 1
    fi
  waitFor: ['flowise: create github issue']

substitutions:
  _FLOWISE_REGION: us-central1
  _USER_NAME: github
  _AUTOPILOT_CLUSTER: "true"
  _BUILD_ID: ${BUILD_ID:0:8}
  _ITERATION: "0"
logsBucket: gs://ai-on-gke-qss-build-logs
options:
  substitutionOption: "ALLOW_LOOSE"
  machineType: "E2_HIGHCPU_8"
timeout: 5400s
availableSecrets:
  secretManager:
  - versionName: projects/ai-on-gke-qss/secrets/tutorials-and-examples-client-id/versions/latest
    env: "GH_CLIENT_ID"
  - versionName: projects/ai-on-gke-qss/secrets/tutorials-and-examples-pem/versions/latest
    env: "GH_PEM"
