# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

steps:
- id: "validate platform"
  # name: "gcr.io/$PROJECT_ID/terraform"
  name: "hashicorp/terraform:latest"
  dir: "github.com/ai-on-gke/common-infra/common/infrastructure/"
  waitFor: ["-"]
  script: |
    set -e
    terraform init -no-color
    terraform validate -no-color

- id: 'create gke cluster'
  # name: 'gcr.io/$PROJECT_ID/terraform'
  name: "hashicorp/terraform:latest"
  dir: 'github.com/ai-on-gke/common-infra/common/infrastructure/'
  allowFailure: true
  waitFor: ['validate platform']
  env:
  - "KUBE_LOAD_CONFIG_FILE=false"
  entrypoint: 'sh'
  args:
  - '-c'
  - |
    set -e

    echo "fail" > /workspace/gke_cluster_result.txt
    terraform apply \
    -var-file=tfvars_tests/standard-gke-public.platform.tfvars \
    -var=project_id=$PROJECT_ID \
    -var=network_name=ml-$SHORT_SHA-$_PR_NUMBER-$_BUILD_ID-$_AUTOPILOT_CLUSTER  \
    -var=subnetwork_name=ml-$SHORT_SHA-$_PR_NUMBER-$_BUILD_ID-$_AUTOPILOT_CLUSTER  \
    -var=subnetwork_region=$_REGION \
    -var=cluster_name=ml-$SHORT_SHA-$_PR_NUMBER-$_BUILD_ID-cluster \
    -var=autopilot_cluster=$_AUTOPILOT_CLUSTER \
    -var=cluster_location=$_REGION \
    -var='cpu_pools=[{initial_node_count=2,name="cpu-pool",machine_type="n1-standard-16",autoscaling=true,min_count=1,max_count=3,disk_size_gb=100,disk_type="pd-standard",}]' \
    -var='gpu_pools=[{initial_node_count=2,name="gpu-pool",machine_type="g2-standard-24",autoscaling=true,min_count=1,max_count=3,disk_size_gb=100,disk_type="pd-balanced",accelerator_count=2,accelerator_type="nvidia-l4",gpu_driver_version="DEFAULT",}]' \
    -auto-approve -no-color
    echo "pass" > /workspace/gke_cluster_result.txt

- id: 'dummy step with a failure'
  name: "hashicorp/terraform:latest"
  dir: 'github.com/ai-on-gke/common-infra/common/infrastructure'
  entrypoint: 'sh'
  allowFailure: true
  waitFor: ['create gke cluster']
  args:
  - '-c'
  - |
    set -e

    echo "fail" > /workspace/dummy_failure_step.txt
    ls -la ./nodir
    echo "pass" > /workspace/dummy_failure_step.txt

- id: 'connect to the cluster'
  name: "hashicorp/terraform:latest"
  dir: 'github.com/ai-on-gke/common-infra/common/infrastructure'
  entrypoint: 'sh'
  allowFailure: true
  waitFor: ['create gke cluster']
  args:
  - '-c'
  - |
    set -e

    echo "fail" > /workspace/connect_to_the_cluster.txt
    gcloud container clusters get-credentials \
    ml-$SHORT_SHA-$_PR_NUMBER-$_BUILD_ID-cluster \
    --location $_REGION \
    --project $PROJECT_ID

    kubectl get pods

    echo "pass" > /workspace/connect_to_the_cluster.txt

- id: 'invoke the cluster'
  name: "hashicorp/terraform:latest"
  dir: 'github.com/ai-on-gke/common-infra/common/infrastructure'
  entrypoint: 'sh'
  allowFailure: true
  waitFor: ['connect to the cluster']
  args:
  - '-c'
  - |
    set -e

    echo "fail" > /workspace/invoke_the_cluster.txt
    kubectl get pods
    echo "pass" > /workspace/invoke_the_cluster.txt

- id: 'cleanup gke cluster'
  # name: 'gcr.io/$PROJECT_ID/terraform'
  name: "hashicorp/terraform:latest"
  dir: 'github.com/ai-on-gke/common-infra/common/infrastructure/'
  allowFailure: true
  waitFor: ['create gke cluster', 'dummy step with a failure']
  entrypoint: 'sh'
  args:
  - '-c'
  - |
    set -e

    echo "fail" > /workspace/cleanup_gke_cluster.txt
    terraform destroy \
    -var-file=tfvars_tests/standard-gke-public.platform.tfvars \
    -var=project_id=$PROJECT_ID \
    -var=network_name=ml-$SHORT_SHA-$_PR_NUMBER-$_BUILD_ID-$_AUTOPILOT_CLUSTER  \
    -var=subnetwork_name=ml-$SHORT_SHA-$_PR_NUMBER-$_BUILD_ID-$_AUTOPILOT_CLUSTER  \
    -var=subnetwork_region=$_REGION \
    -var=cluster_name=ml-$SHORT_SHA-$_PR_NUMBER-$_BUILD_ID-cluster \
    -var=autopilot_cluster=$_AUTOPILOT_CLUSTER \
    -var=cluster_location=$_REGION \
    -var='cpu_pools=[{initial_node_count=2,name="cpu-pool",machine_type="n1-standard-16",autoscaling=true,min_count=1,max_count=3,disk_size_gb=100,disk_type="pd-standard",}]' \
    -var='gpu_pools=[{initial_node_count=2,name="gpu-pool",machine_type="g2-standard-24",autoscaling=true,min_count=1,max_count=3,disk_size_gb=100,disk_type="pd-balanced",accelerator_count=2,accelerator_type="nvidia-l4",gpu_driver_version="DEFAULT",}]' \
    -auto-approve -no-color
    echo "pass" > /workspace/cleanup_gke_cluster.txt

- id: 'check result'
  # name: 'gcr.io/$PROJECT_ID/terraform'
  name: "hashicorp/terraform:latest"
  entrypoint: 'sh'
  waitFor: ['cleanup gke cluster']
  args:
  - '-c'
  - |
    set -e

    echo "pass" > /workspace/check_result.txt

    if [[ $(cat /workspace/gke_cluster_result.txt) != "pass" ]]; then
      echo "gke cluster creation failed"
      echo "error" > /workspace/check_result.txt
    fi

    if [[ $(cat /workspace/dummy_failure_step.txt) != "pass" ]]; then
      echo "dummy failure step failed"
      echo "error" > /workspace/check_result.txt
    fi

    if [[ $(cat /workspace/connect_to_the_cluster.txt) != "pass" ]]; then
      echo "connect to the cluster step failed"
      echo "error" > /workspace/check_result.txt
    fi

    if [[ $(cat /workspace/invoke_the_cluster.txt) != "pass" ]]; then
      echo "invoke the cluster step failed"
      echo "error" > /workspace/check_result.txt
    fi

    cat /workspace/check_result.txt

    if [[ $(cat /workspace/check_result.txt) != "pass" ]]; then
      exit 1
    fi

substitutions:
  _REGION: us-east4
  _USER_NAME: github
  _AUTOPILOT_CLUSTER: "false"
  _BUILD_ID: ${BUILD_ID:0:8}
  _SHIPSHAPE_IMAGE: us-docker.pkg.dev/k8ssecurityvalidation-agent/k8ssecurityvalidation-agent/k8ssecurityvalidation-agent@sha256:cd45e6cd84e9a45462ddbca18c4731fd4e264d517ee98131eb5be4eb57691f44
logsBucket: gs://ai-on-gke-qss-build-logs
options:
  substitutionOption: "ALLOW_LOOSE"
  machineType: "E2_HIGHCPU_8"
timeout: 5400s
# availableSecrets:
#   secretManager:
#   - versionName: projects/ai-on-gke-qss/secrets/cloudbuild-kaggle-username/versions/latest
#     env: "KAGGLE_USERNAME"
#   - versionName: projects/ai-on-gke-qss/secrets/cloudbuild-kaggle-key/versions/latest
#     env: "KAGGLE_KEY"
